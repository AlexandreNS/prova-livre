generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionTypeEnum {
  discursive
  options
}

enum UserRoleEnum {
  owner
  admin
  editor
  tutor
  viewer
}

model Company {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name String
  slug String?

  userCompanyRoles   UserCompanyRole[]
  categories         Category[]
  studentsCompany    StudentCompany[]
  classes            Class[]
  classStudents      ClassStudent[]
  questions          Question[]
  questionCategories QuestionCategory[]
  Exam               Exam[]
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name       String?
  email      String    @unique
  password   String?   @db.Text
  accessedAt DateTime?

  userCompanyRoles UserCompanyRole[]
}

model UserCompanyRole {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  role UserRoleEnum

  userId Int
  user   User @relation(fields: [userId], references: [id])

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Student {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name              String?
  email             String    @unique
  password          String?   @db.Text
  temporaryPassword String?   @db.Text
  tempPassExpiredAt DateTime?
  accessedAt        DateTime?

  studentCompanies StudentCompany[]
  classesStudent   ClassStudent[]
}

model StudentCompany {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Class {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String
  description String?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  classStudents ClassStudent[]
}

model ClassStudent {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name                   String
  allowMultipleSelection Boolean @default(false)

  parentId      Int?
  parent        Category?  @relation("ParentCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("ParentCategory")

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  questionCategories QuestionCategory[]
  ExamRuleCategory   ExamRuleCategory[]
}

model Question {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  description String
  type        QuestionTypeEnum
  maxLength   Int?
  enabled     Boolean          @default(true)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  questionCategories QuestionCategory[]
  questionOptions    QuestionOption[]
  ExamRule           ExamRule[]
}

model QuestionCategory {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

model QuestionOption {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  description String
  isCorrect   Boolean @default(false)

  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Exam {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name        String
  title       String?
  description String?
  minScore    Int?
  maxScore    Int?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  examRules ExamRule[]
}

model ExamRule {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  score          Int?
  questionsCount Int               @default(1)
  questionType   QuestionTypeEnum?

  examId Int
  exam   Exam @relation(fields: [examId], references: [id])

  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])

  examRuleCategories ExamRuleCategory[]
}

model ExamRuleCategory {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  examRuleId Int
  examRule   ExamRule @relation(fields: [examRuleId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}
